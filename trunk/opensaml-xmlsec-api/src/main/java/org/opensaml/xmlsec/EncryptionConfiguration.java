/*
 * Licensed to the University Corporation for Advanced Internet Development, 
 * Inc. (UCAID) under one or more contributor license agreements.  See the 
 * NOTICE file distributed with this work for additional information regarding
 * copyright ownership. The UCAID licenses this file to You under the Apache 
 * License, Version 2.0 (the "License"); you may not use this file except in 
 * compliance with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.opensaml.xmlsec;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

import org.opensaml.security.credential.Credential;
import org.opensaml.xmlsec.keyinfo.NamedKeyInfoGeneratorManager;


/**
 * The configuration information to use when generating encrypted XML.
 */
public interface EncryptionConfiguration {
    
    /**
     * Get the encryption credential to use when encrypting the EncryptedData.
     * 
     * @return the encryption credential
     */
    @Nullable public Credential getDataEncryptionCredential();
    
    /**
     * Get the encryption algorithm URI for the specified JCA key algorithm name and optional key
     * length.
     * 
     * Passing <code>null</code> as the key length will return the default algorithm URI for the specified
     * JCA algorithm, if a default is configured.  If no mapping for the specified key length is available,
     * the default mapping will be returned.
     * 
     * @param jcaAlgorithmName a JCA key algorithm name
     * @param keyLength  optional key length parameter
     * @return an encryption algorithm URI, or null if no mapping is available
     */
    @Nullable public String getDataEncryptionAlgorithmURI(@Nonnull final String jcaAlgorithmName,
            @Nullable final Integer keyLength);
    
    /**
     * Get the encryption algorithm URI for the encryption key contained within the specified credential.
     * 
     * @param credential a credential containing an encryption key
     * @return an encryption algorithm URI mapping, or null if no mapping is available
     */
    @Nullable public String getDataEncryptionAlgorithmURI(@Nonnull final Credential credential);
    
    /**
     * Get the encryption credential to use when encrypting the EncryptedKey.
     * 
     * @return the encryption credential
     */
    @Nullable public Credential getKeyTransportEncryptionCredential();
    
    /**
     * Get the key transport encryption algorithm URI for the specified JCA key algorithm name, optional key
     * length and optional JCA key algorithm name of the key to be encrypted.
     * 
     * Note that typically the key length parameter is required for lookup of symmetric key wrap algorithm
     * URI's, but is typically not required or relevant for asymmetric key transport algorithms.
     * 
     * If a mapping is not available considering the optional key length and wrapped algorithm parameters as passed,
     * a lookup will next be attempted by omiting the (non-null) wrapped key algorithm, and if that is unsuccessful,
     * by then omitting the (non-null) key length parameter.  If a mapping has still not been found, then a final
     * lookup attempt will be made using the key encryption key's JCA algorithm name alone.
     * 
     * @param jcaAlgorithmName a JCA key algorithm name for the key encryption key
     * @param keyLength  optional key length parameter
     * @param wrappedKeyAlgorithm a JCA key algorithm name for the key to be encrypted
     * @return an encryption algorithm URI, or null if no mapping is available
     */
    @Nullable public String getKeyTransportEncryptionAlgorithmURI(@Nonnull final String jcaAlgorithmName,
            @Nullable final Integer keyLength, @Nullable final String wrappedKeyAlgorithm);
    
    /**
     * Get the key transport encryption algorithm URI for the encryption key contained within the specified credential.
     * 
     * @param credential a credential containing an encryption key
     * @param wrappedKeyAlgorithm the JCA key algorithm name of the key being encrypted
     * @return an encryption algorithm URI mapping, or null if no mapping is available
     */
    @Nullable public String getKeyTransportEncryptionAlgorithmURI(@Nonnull final Credential credential,
            @Nullable final String wrappedKeyAlgorithm);
    
    /**
     * Get the encryption algorithm URI to be used when auto-generating random data encryption keys.
     * 
     * @return an encryption algorithm URI, or null if no default is available
     */
    @Nullable public String getAutoGeneratedDataEncryptionKeyAlgorithmURI();

    /**
     * Get the KeyInfoGenerator manager to use when generating the EncryptedData/KeyInfo.
     * 
     * @return the KeyInfoGenerator manager instance
     */
    @Nullable public NamedKeyInfoGeneratorManager getDataKeyInfoGeneratorManager();
    
    /**
     * Get the KeyInfoGenerator manager to use when generating the EncryptedKey/KeyInfo.
     * 
     * @return the KeyInfoGenerator manager instance
     */
    @Nullable public NamedKeyInfoGeneratorManager getKeyTransportKeyInfoGeneratorManager();
    
}