<project name="XML Tooling" basedir="." default="package">

    <property file="build.properties" />

    <property name="lib.dir" value="${basedir}/lib" />
    <property name="core-src.dir" value="${basedir}/src" />
	<property name="core-schema.dir" value="${basedir}/src/schema" />
    <property name="test-src.dir" value="${basedir}/test" />
    <property name="doc.dir" value="${basedir}/doc" />
    <property name="javadoc.dir" value="${doc.dir}/javadoc" />
    <property name="build-lib.dir" value="${basedir}/build-lib" />
    <property name="build.dir" value="${basedir}/build" />
    <property name="core-classes.dir" value="${build.dir}/core" />
    <property name="test-classes.dir" value="${build.dir}/test" />
    <property name="test-results.dir" value="${build.dir}/test-results" />
	<property name="test-report.dir" value="${doc.dir}/test-report" />
    <property name="dist.dir" value="${basedir}/dist" />

    <property name="jdk.target" value="1.5" />

    <property name="version" value="1.0-TP2" />
	<property name="jar.name" value="xmltooling-${version}-jdk-${jdk.target}.jar" />
	<property name="src-dist.name" value="xmltooling-${version}-jdk-${jdk.target}-src" />
	<property name="bin-dist.name" value="xmltooling-${version}-jdk-${jdk.target}-bin" />
    <property name="year" value="2002-2006" />
    <property name="copyright" value="Copyright &#169; ${year} UCAID. All Rights Reserved." />

    <!-- Load ant-contrib tasks -->
    <taskdef resource="net/sf/antcontrib/antlib.xml" />

    <!-- Classpath for building core classes-->
    <path id="build-path">
        <fileset dir="${build-lib.dir}" includes="**/*.jar" />
        <fileset dir="${lib.dir}" includes="**/*.jar" />
    </path>

    <!-- Classpath for testing classes-->
    <path id="test-path">
        <path refid="build-path" />
        <pathelement location="${core-classes.dir}" />
        <pathelement location="${core-src.dir}" />
        <pathelement location="${test-classes.dir}" />
        <pathelement location="${test-src.dir}" />
    </path>

    <!-- Prepare directory structure for build -->
    <target name="build-init">
        <mkdir dir="${build.dir}" />
    </target>

    <!-- Compile core (non-test) classes -->
    <target name="compile-core" depends="build-init, clean-compile">
        <mkdir dir="${core-classes.dir}" />

        <javac srcdir="${core-src.dir}" destdir="${core-classes.dir}" includes="**/*.java" debug="on" source="1.5">
            <classpath refid="build-path" />
        </javac>

    </target>

    <!-- Compile unit test classes -->
    <target name="compile-test" depends="compile-core">
        <mkdir dir="${test-classes.dir}" />

        <javac srcdir="${test-src.dir}" destdir="${test-classes.dir}" includes="**/*.java" debug="on" source="1.5">
            <classpath refid="test-path" />
        </javac>

        <copy toDir="${test-classes.dir}/conf">
            <fileset dir="${test-src.dir}/conf" />
        </copy>
        
        <copy toDir="${test-classes.dir}/data">
            <fileset dir="${test-src.dir}/data" />
        </copy>

        <copy file="${test-src.dir}/log4j.xml" tofile="${test-classes.dir}/log4j.xml"/>

    </target>

    <!-- Compile and run unit tests -->
    <target name="test" depends="compile-core, compile-test">
        <mkdir dir="${test-results.dir}" />

    	<echo message="Excuting unit tests using endorsed directory ${java.endorsed.dirs}" />
        <junit printsummary="off" fork="yes" forkmode="once" haltonerror="false" haltonfailure="true" dir="${basedir}">
        	<jvmarg line="-Djava.endorsed.dirs=${java.endorsed.dirs}" />
            <classpath refid="test-path" />
            <formatter type="xml" />
            <batchtest todir="${test-results.dir}">
                <fileset dir="${test-classes.dir}">
                    <include name="**/*Test.class" />
                </fileset>
            </batchtest>
        </junit>
    	<junitreport todir="${test-results.dir}">
    	  <fileset dir="${test-results.dir}">
    	    <include name="TEST-*.xml"/>
    	  </fileset>
    	  <report format="frames" todir="${test-report.dir}"/>
    	</junitreport>
    </target>

    <!-- Javadoc core (non-test) classes -->
    <target name="javadoc">
        <mkdir dir="${javadoc.dir}" />
        <javadoc packagenames="org.opensaml.*" 
        	     sourcepath="${core-src.dir}" 
        	     destdir="${javadoc.dir}" 
        	     author="false" version="true" 
        	     windowtitle="XML Tooling ${version} Java API" 
        	     doctitle="XML Tooling ${version} Java API" 
        	     bottom="${copyright}"
        	     overview="${core-src.dir}/overview.html">
            <classpath refid="build-path" />
        </javadoc>
    </target>

    <!-- Removes previously compiled files -->
    <target name="clean-compile">
        <delete dir="${build.dir}" />
    </target>

    <!-- Removes all build generated content -->
    <target name="clean" depends="clean-compile">
        <delete dir="${doc.dir}" />
        <delete dir="${dist.dir}" />
    </target>

    <!-- Create JAR file -->
    <target name="package" depends="compile-core, test">
        <mkdir dir="${dist.dir}" />

        <if>
            <equals arg1="${jdk.target}" arg2="1.4" />
            <then>
                <java classname="com.rc.retroweaver.Weaver">
                    <arg value="-source" />
                    <arg value="${core-classes.dir}" />
                    <classpath>
                        <fileset dir="${build-lib.dir}">
                            <include name="**/*.jar" />
                        </fileset>
                    </classpath>
                </java>

                <echo message="**************************************************************" />
                <echo message="    Remember, you must include the retroweaver-rt jar" />
                <echo message="    file, located in the lib directory, along with the" />
                <echo message="    ${jar.name} on your" />
                <echo message="    classpath in order to use this with JDK 1.4" />
                <echo message="**************************************************************" />

            </then>
        </if>

        <jar destfile="${dist.dir}/${jar.name}" basedir="${core-classes.dir}" whenempty="fail">
        	<zipfileset dir="${core-schema.dir}" prefix="schema"/>
    	</jar>

    </target>

    <!-- **************************************************************** -->
    <!-- ***                                                          *** -->
    <!-- ***                     Developer Tasks                      *** -->
    <!-- ***                                                          *** -->
    <!-- **************************************************************** -->
	
    <!-- Create TGZ source distribution -->
    <target name="tgz-src-dist" depends="package, javadoc">
        <tar tarfile="${dist.dir}/${src-dist.name}.tgz" compression="gzip">
        	<tarfileset dir="${build-lib.dir}" prefix="/build-lib/"/>
        	<tarfileset dir="${lib.dir}" prefix="/lib/"/>
        	<tarfileset dir="${core-src.dir}" prefix="/src/"/>
    		<tarfileset dir="${test-src.dir}" prefix="/test/"/>
        	<tarfileset dir="${doc.dir}" prefix="/doc/"/>
        	<tarfileset dir="${dist.dir}" prefix="/dist/"/>
        	<tarfileset file="${basedir}/*.*" prefix="/"/>
        </tar>
    	<checksum file="${dist.dir}/${src-dist.name}.tgz" />
    </target>

    <!-- Create TGZ binary distribution -->
    <target name="tgz-bin-dist" depends="package, javadoc">
        <tar tarfile="${dist.dir}/${bin-dist.name}.tgz" compression="gzip">
        	<tarfileset dir="${lib.dir}" prefix="/lib/"/>
        	<tarfileset dir="${doc.dir}" prefix="/doc/"/>
        	<tarfileset dir="${dist.dir}" prefix="/dist/"/>
        </tar>
    	<checksum file="${dist.dir}/${bin-dist.name}.tgz" />
    </target>

    <!-- Create ZIP source distribution -->
    <target name="zip-src-dist" depends="package, javadoc">
        <zip zipfile="${dist.dir}/${src-dist.name}.zip" whenempty="fail">
        	<zipfileset dir="${build-lib.dir}" prefix="build-lib/"/>
        	<zipfileset dir="${lib.dir}" prefix="lib/"/>
        	<zipfileset dir="${core-src.dir}" prefix="src/"/>
    		<zipfileset dir="${test-src.dir}" prefix="test/"/>
        	<zipfileset dir="${doc.dir}" prefix="doc/"/>
        	<zipfileset dir="${dist.dir}" prefix="dist/"/>
        	<zipfileset file="${basedir}/*.*" prefix=""/>
        </zip>
    	<checksum file="${dist.dir}/${src-dist.name}.zip" />
    </target>

    <!-- Create ZIP binary distribution -->
    <target name="zip-bin-dist" depends="package, javadoc">
        <zip zipfile="${dist.dir}/${bin-dist.name}.zip" whenempty="fail">
        	<zipfileset dir="${lib.dir}" prefix="lib/"/>
        	<zipfileset dir="${doc.dir}" prefix="doc/"/>
        	<zipfileset dir="${dist.dir}" prefix="dist/"/>
        </zip>
    	<checksum file="${dist.dir}/${bin-dist.name}.zip" />
    </target>

</project>